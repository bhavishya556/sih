import React, { useState, useEffect } from 'react';
import { useFirebase } from '../context/Firebase';
import { ref, get, orderByChild, equalTo, onValue ,query} from 'firebase/database';
import { Link, useNavigate } from 'react-router-dom';

const AgencyDetails = () => {
  const firebase = useFirebase();
  const [agencyEmail, setAgencyEmail] = useState('');
  const [agencyData, setAgencyData] = useState(null);

  const fetchAgencyDetails = async () => {
    try {
      const agencyRef = ref(firebase.database, 'Agency_Info');
      const emailQuery = query(agencyRef, orderByChild('emailAddress'), equalTo(agencyEmail));
      const snapshot = await get(emailQuery);

      if (snapshot.exists()) {
        // If a match is found, extract the required fields
        const agencyData = snapshot.val();
        const agencyInfo = Object.values(agencyData)[0]; // Assuming there's only one match
        const { alert, msg, agencyCoordinator, accidentLocation, userLocation } = agencyInfo;

        setAgencyData({ alert, msg, agencyCoordinator, accidentLocation, userLocation });
      } else {
        // Agency with the specified email does not exist
        setAgencyData(null);
      }
    } catch (error) {
      console.error('Error fetching agency details:', error);
    }
  };

  useEffect(() => {
    // Set up the Firebase event listener when the component mounts

    const agencyRef = ref(firebase.database, 'Agency_Info');

    const unsubscribe = onValue(agencyRef, (snapshot) => {
      if (snapshot.exists()) {
        // Data has changed, fetch and update agency details
        fetchAgencyDetails(agencyEmail);
      }
    });

    // Clean up the listener when the component unmounts
    return () => {
      unsubscribe(); // Unsubscribe to stop listening when the component unmounts
    };
  }, [firebase]);

  return (
    <div>
      <Link to={'/agencys'}>Add Agency</Link>
      <h1>Fetch Agency Details</h1>
      <label>
        Agency Email:
        <input
          type="text"
          value={agencyEmail}
          onChange={(e) => setAgencyEmail(e.target.value)}
        />
      </label>
      <button onClick={fetchAgencyDetails}>Fetch Details</button>

      {agencyData && (
        <div>
          <h2>Agency Details</h2>
          <p>Email: {agencyEmail}</p>
          {agencyData.alert ? <p>alert: true</p> : <p>alert: false</p>}
          <p>Message: {agencyData.msg}</p>
          <p>Agency Coordinator: {agencyData.agencyCoordinator}</p>
          <p>Accident Location: {agencyData.accidentLocation}</p>
          <p>User Location: {agencyData.userLocation}</p>
        </div>
      )}
    </div>
  );
};

export default AgencyDetails;
